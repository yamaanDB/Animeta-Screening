{"version":3,"file":"static/js/4092.a056779e.chunk.js","mappings":"omBAEMA,EACJ,4FAEIC,EAAa,eAEbC,EAAe,UAERC,EAAkB,SAACC,GAAK,OACnCA,GAAoC,KAA5BA,EAAMC,WAAWC,MAAqB,EAEnCC,EAAc,SAACC,GAAG,OAAKN,EAAaO,KAAKD,EAAK,EAE9CE,EAAiB,SAACN,GAAK,OAClCA,GAAQH,EAAWQ,KAAKL,EAAc,EAE3BO,EAAqB,SAACP,GAAK,OACtCA,GAASJ,EAAeS,KAAKL,EAAO,EAEzBQ,EAAsB,SAACR,GAAK,OAAKA,GAASA,EAAQ,CAAE,EAEpDS,EAAc,SAACT,GAAK,OAAMA,GAAQ,WAAWK,KAAKL,EAAa,EAE/DU,EAAyB,SAACV,GAAK,OAC1CA,GAAQ,iBAAiBK,KAAKL,EAAc,EAEjCW,EAAsB,SAACC,GAAG,OAAK,SAACZ,GAAK,IAAAa,EAAA,OAChDb,IAAqB,QAAba,EAAAC,OAAOd,UAAM,IAAAa,OAAA,EAAbA,EAAeE,SAAUH,CAAW,CAAD,EAEhCI,EAAsB,SAACJ,GAAG,OAAK,SAACZ,GAAK,IAAAiB,EAAA,OAChDjB,IAAqB,QAAbiB,EAAAH,OAAOd,UAAM,IAAAiB,OAAA,EAAbA,EAAeF,SAAUH,CAAW,CAAD,EAEhCM,EAAqB,SAChCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAQ,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,QAAS,EAAG,CACpB,IAAIU,EAAkB,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EACdO,KAAI,SAACC,GAAC,OAAKA,GAAKC,IAAQ,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,YAAY,IACvCC,OAAOC,SACJC,EAAUJ,IAAAA,IAAWH,GACrBQ,EAAWL,MAASM,IAAI,QAAUN,IAAOI,GAASE,IAAI,QAE5D,IAAKd,GAAkBa,GAAYb,GAC7BC,GAAYC,GAAaC,EAE3B,OADAF,EAASC,EAAW,CAAEa,KAAMZ,EAAWC,YAAAA,KAChC,CAGb,CACA,OAAO,CACT,EAEaY,EAAc,SAACC,GAEN,MAAhBA,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,KAAhBD,EAAMC,OAAgC,KAAhBD,EAAMC,OAAgC,KAAhBD,EAAMC,OAAgC,KAAhBD,EAAMC,OAAgC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,KAAhBD,EAAMC,OACjQD,EAAME,gBAEV,EAEaC,EAAiB,SAACH,GACT,MAAhBA,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,KAAhBD,EAAMC,OAAgC,KAAhBD,EAAMC,OAAgC,KAAhBD,EAAMC,OAAgC,KAAhBD,EAAMC,OAAgC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,MAAhBD,EAAMC,OAAiC,KAAhBD,EAAMC,OACjQD,EAAME,iBAMR,IAAME,EAAeJ,EAAMK,OAAO1C,MAClC,GAAIyC,EAAa1B,QAAU,EAAG,CAC5B,IAAM4B,EAAWF,EAAaG,MAAM,EAAG,GACvCP,EAAMK,OAAO1C,MAAQ2C,CACvB,CACF,C","sources":["helpers/validation.js"],"sourcesContent":["import moment from \"moment\";\n\nconst PASSWORD_REGEX =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?& ]{8,}$/s;\n\nconst Name_Regex = /^[a-zA-Z ]+$/;\n\nconst pinCodeRegex = /^\\d{6}$/;\n\nexport const spaceValidation = (value) =>\n  value ? value.toString().trim() !== \"\" : true;\n\nexport const validatePIN = (pin) => pinCodeRegex.test(pin);\n\nexport const nameValidation = (value) =>\n  value ? Name_Regex.test(value) : true;\n\nexport const passwordValidation = (value) =>\n  value && PASSWORD_REGEX.test(value);\n\nexport const ignoreNegativeValue = (value) => value && value > 0;\n\nexport const onlyNumbers = (value) => (value ? /^[0-9]+$/.test(value) : true);\n\nexport const numberLetterValidation = (value) =>\n  value ? /^[0-9a-zA-Z]+$/.test(value) : true;\n\nexport const maxLengthValidation = (len) => (value) =>\n  value ? String(value)?.length <= len : true;\n\nexport const minLengthValidation = (len) => (value) =>\n  value ? String(value)?.length >= len : true;\n\nexport const experienceValidate = (\n  data,\n  experienceYear,\n  setError,\n  errorName,\n  errorType,\n  shouldFocus\n) => {\n  if (data?.length > 0) {\n    let momentDates = data\n      ?.map((x) => x && moment(x?.passingYear))\n      .filter(Boolean);\n    const minDate = moment.min(momentDates);\n    const diffYear = moment().get(\"year\") - moment(minDate).get(\"year\");\n\n    if (+experienceYear && diffYear < +experienceYear) {\n      if (setError && errorName && errorType) {\n        setError(errorName, { type: errorType, shouldFocus });\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nexport const numberInput = (event) => {\n  // Check if the pressed key is the up arrow (38) or down arrow (40)\n  if (event.which === 107 || event.which === 187 || event.which === 38 || event.which === 40 || event.which === 45 || event.which === 69 || event.which === 189 || event.which === 173 || event.which === 110 || event.which === 109 || event.which === 190 || event.which === 46) {\n    event.preventDefault();\n  }\n};\n\nexport const numberInputMax = (event) => {\n  if (event.which === 107 || event.which === 187 || event.which === 38 || event.which === 40 || event.which === 45 || event.which === 69 || event.which === 189 || event.which === 173 || event.which === 110 || event.which === 109 || event.which === 190 || event.which === 46) {\n    event.preventDefault();\n  }\n  // if (event.which === 69 || event.which == 189 || event.which === 38 || event.which === 40 ) {\n  //   event.preventDefault();\n  // }\n  // Check if the pressed key is the up arrow (38) or down arrow (40)\n  const currentValue = event.target.value;\n  if (currentValue.length >= 3) {\n    const newValue = currentValue.slice(0, 2);\n    event.target.value = newValue;\n  }\n};\n\n// export const numberInput = event => {\n//     if (\n//         (event?.keyCode === 8) ||\n//         (event?.keyCode >= 48 && event?.keyCode <= 57) ||\n//         (event?.keyCode >= 37 && event?.keyCode <= 49)\n//     ) {\n//         return true;\n//     } else {\n//         event.preventDefault();\n//     }\n// }\n"],"names":["PASSWORD_REGEX","Name_Regex","pinCodeRegex","spaceValidation","value","toString","trim","validatePIN","pin","test","nameValidation","passwordValidation","ignoreNegativeValue","onlyNumbers","numberLetterValidation","maxLengthValidation","len","_String","String","length","minLengthValidation","_String2","experienceValidate","data","experienceYear","setError","errorName","errorType","shouldFocus","momentDates","map","x","moment","passingYear","filter","Boolean","minDate","diffYear","get","type","numberInput","event","which","preventDefault","numberInputMax","currentValue","target","newValue","slice"],"sourceRoot":""}