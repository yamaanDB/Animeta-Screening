{"version":3,"file":"static/js/7892.37182bfe.chunk.js","mappings":"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","sources":["assets/icons/closeIcon.svg","assets/icons/dropdownArrow.svg","components/AddUnits/InventorySetUp/CustomTable/index.jsx","components/AddUnits/InventorySetUp/InventoryTable/BlockTable/index.jsx","components/AddUnits/InventorySetUp/InventoryTable/FloorTable/index.jsx","assets/icons/redInfo1.svg","components/AddUnits/InventorySetUp/StructureModal/StructureModal.js","assets/icons/horizontalLine.svg","components/AddUnits/InventorySetUp/index.jsx","components/UI/common/RadioButton/index.js","components/UI/common/Tab/UnitNamingTab/UnitNamingTab.js","components/UI/common/Toggle/index.jsx","helpers/validation.js","webpack://Boston-Living/./src/components/AddUnits/InventorySetUp/StructureModal/styles.scss?3721","webpack://Boston-Living/./src/components/UI/common/Tab/UnitNamingTab/style.scss?ebcb","webpack://Boston-Living/./src/components/AddUnits/InventorySetUp/CustomTable/index.module.scss?2f50","webpack://Boston-Living/./src/components/AddUnits/InventorySetUp/InventoryTable/BlockTable/styles.module.scss?7e90","webpack://Boston-Living/./src/components/AddUnits/InventorySetUp/InventoryTable/FloorTable/styles.module.scss?1e44","webpack://Boston-Living/./src/components/AddUnits/InventorySetUp/index.module.scss?f8eb","webpack://Boston-Living/./src/components/UI/common/Toggle/Toggle.module.scss?3996"],"sourcesContent":["var _g, _defs;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgCloseIcon(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_1_93755)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.9996 6.00084C11.859 5.86024 11.6682 5.78125 11.4693 5.78125C11.2705 5.78125 11.0797 5.86024 10.9391 6.00084L8.9996 7.94034L7.0601 6.00084C6.91864 5.86422 6.72919 5.78863 6.53255 5.79033C6.3359 5.79204 6.14779 5.87092 6.00873 6.00998C5.86968 6.14903 5.7908 6.33714 5.78909 6.53379C5.78738 6.73044 5.86298 6.91989 5.9996 7.06134L7.9391 9.00084L5.9996 10.9403C5.86298 11.0818 5.78738 11.2712 5.78909 11.4679C5.7908 11.6645 5.86968 11.8526 6.00873 11.9917C6.14779 12.1308 6.3359 12.2096 6.53255 12.2113C6.72919 12.2131 6.91864 12.1375 7.0601 12.0008L8.9996 10.0613L10.9391 12.0008C11.0805 12.1375 11.27 12.2131 11.4666 12.2113C11.6633 12.2096 11.8514 12.1308 11.9905 11.9917C12.1295 11.8526 12.2084 11.6645 12.2101 11.4679C12.2118 11.2712 12.1362 11.0818 11.9996 10.9403L10.0601 9.00084L11.9996 7.06134C12.1402 6.92069 12.2192 6.72996 12.2192 6.53109C12.2192 6.33222 12.1402 6.14149 11.9996 6.00084Z\",\n    fill: \"#1E2528\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 0C7.21997 0 5.47991 0.527841 3.99987 1.51677C2.51983 2.50571 1.36628 3.91131 0.685088 5.55585C0.00389957 7.20038 -0.17433 9.00998 0.172937 10.7558C0.520204 12.5016 1.37737 14.1053 2.63604 15.364C3.89472 16.6226 5.49836 17.4798 7.24419 17.8271C8.99002 18.1743 10.7996 17.9961 12.4442 17.3149C14.0887 16.6337 15.4943 15.4802 16.4832 14.0001C17.4722 12.5201 18 10.78 18 9C17.9974 6.61384 17.0484 4.32616 15.3611 2.63889C13.6738 0.951621 11.3862 0.00258081 9 0ZM9 16.5C7.51664 16.5 6.0666 16.0601 4.83323 15.236C3.59986 14.4119 2.63856 13.2406 2.07091 11.8701C1.50325 10.4997 1.35473 8.99168 1.64411 7.53682C1.9335 6.08197 2.64781 4.74559 3.6967 3.6967C4.7456 2.64781 6.08197 1.9335 7.53683 1.64411C8.99168 1.35472 10.4997 1.50325 11.8701 2.0709C13.2406 2.63856 14.4119 3.59985 15.236 4.83322C16.0601 6.06659 16.5 7.51664 16.5 9C16.4978 10.9885 15.7069 12.8948 14.3009 14.3009C12.8948 15.7069 10.9885 16.4978 9 16.5Z\",\n    fill: \"#1E2528\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_1_93755\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 18,\n    height: 18,\n    fill: \"white\"\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCloseIcon);\nexport default __webpack_public_path__ + \"static/media/closeIcon.a8e5ff0a4405946a643a73a812238b3b.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDropdownArrow(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 6,\n    viewBox: \"0 0 10 6\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 1L5 5L1 1\",\n    stroke: \"#1E2528\",\n    strokeWidth: 1.2,\n    strokeMiterlimit: 10,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDropdownArrow);\nexport default __webpack_public_path__ + \"static/media/dropdownArrow.1110f3c54e41b6820f381d3b1ac4477a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect } from \"react\";\nimport styles from \"./index.module.scss\";\nimport dropdownArrow from \"../../../../assets/icons/dropdownArrow.svg\";\nimport InputBox from \"components/UI/common/InputBox/InputBox\";\nimport { numberInputMax } from \"helpers/validation\";\nimport FormErrorMessage from \"components/UI/common/ErrorMessage\";\n// import upArrow from \"../../../../assets/icons/upArrow.svg\";\n\nconst CustomTable = ({\n  initialData,\n  tabelHeader,\n  tabelHeader2,\n  tabelHeader3,\n  tabelHeader4,\n  errors,\n  register,\n  setduplicate,\n  otherBlocksList = [],\n  // otherBlocksList,\n  // setotherBlocksList,\n  handleFloorCount = () => {},\n  onToggleBulkUpload,\n  watch,\n}) => {\n  // const [otherBlocksList, setotherBlocksList] = useState([]);\n\n  const handleUserInput = (index, event, Type) => {\n    const newValue = event.target.value;\n    const updatedList = [...otherBlocksList];\n    updatedList[index].Type = newValue;\n    handleFloorCount(event.target.name, newValue);\n  };\n\n  // useEffect(() => {\n  //   setotherBlocksList(initialData);\n  // }, [initialData]);\n\n  // array to keep track of which dropdowns are open\n  // const [openDropdowns, setOpenDropdowns] = useState(\n  //   Array(initialData.length).fill(false)\n  // );\n\n  // const toggleDropdown = (index) => {\n  //   const updatedDropdowns = [...openDropdowns];\n  //   updatedDropdowns[index] = !updatedDropdowns[index];\n  //   setOpenDropdowns(updatedDropdowns);\n  //   // onToggleBulkUpload();\n  // };\n\n  // handleInputChange function to update the input values\n  // const handleInputChange = (e, index, columnName) => {\n  //   console.log(e, index, columnName);\n  //   const updatedData = [...otherBlocksList];\n  //   updatedData[index][columnName] = e.target.value;\n  //   setotherBlocksList(updatedData);\n  // };\n  console.log(otherBlocksList, \"otherBlocksList\");\n\n  return (\n    <>\n      <div className={styles.tableContainer}>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>{tabelHeader}</th>\n              <th className={styles.propertyName}>\n                <div className={styles.columnContainer}>{tabelHeader2}</div>\n              </th>\n              <th>{tabelHeader3}</th>\n              {tabelHeader4 != null && <th>{tabelHeader4}</th>}\n            </tr>\n          </thead>\n          <tbody>\n            {otherBlocksList.map((row, index) => (\n              <React.Fragment key={index}>\n                <tr>\n                  {console.log(row?.block)}\n                  {console.log(row)}\n                  {console.log(watch(\"Block\"))}\n                  <td>\n                    <InputBox\n                      type=\"text\"\n                      // value={row?.block}\n                      ratefiled={true}\n                      readOnly={true}\n                      name={`floorsPerBlock.${index}.block`}\n                      className={styles.styleInputBox}\n                      placeholder=\"Enter block\"\n                      errors={errors}\n                      register={register(`floorsPerBlock.${index}.block`, {\n                        required:\n                          row?.block == \"\" || row?.block == null\n                            ? // !saveDraft\n                              true\n                            : false,\n                      })}\n                      onChange={(event) => handleUserInput(index, event)}\n                    />\n                  </td>\n                  <td>\n                    <InputBox\n                      type=\"text\"\n                      ratefiled={true}\n                      className={styles.styleInputBox}\n                      name={`floorsPerBlock.${index}.blockName`}\n                      placeholder=\"Enter block name\"\n                      errors={errors}\n                      value={row?.blockName}\n                      onChange={(event) =>\n                        handleUserInput(index, event, \"blockName\")\n                      }\n                      register={register(`floorsPerBlock.${index}.blockName`, {\n                        required:\n                          row?.blockName == \"\" || row?.blockName == null\n                            ? // !saveDraft\n                              true\n                            : false,\n                            validate: {\n                              isduplicate: (value, field) => {\n                                const { floorsPerBlock } = field;\n                                if (!value) return true;\n\n                                // Check for duplicates across all elements in floorsPerBlock\n                                const isDuplicate = floorsPerBlock.some(\n                                  (floor, i) =>\n                                    i !== index && floor.blockName === value\n                                );\nsetduplicate(isDuplicate)\n                                return !isDuplicate;\n                              },\n                            },\n                      })}\n                    />\n                    <div className={styles.error}>\n                      <FormErrorMessage\n                        error={errors?.floorsPerBlock?.[index]?.blockName}\n                        messages={{\n                          required: \"Enter Block Name is required\",\n                          isduplicate: \"Block Name should be unique\",\n\n                        }}\n                      />\n                    </div>\n                    {/* <input\n                      type=\"text\"\n                      value={row.blockName}\n                      //   className={styles.text}\n                      onChange={(e) =>\n                        handleInputChange(e, index, \"numberOfFloors\")\n                      }\n                      style={{ border: \"none\", outline: \"none\" }}\n                      placeholder=\"Enter block name\"\n                    /> */}\n                  </td>\n                  {tabelHeader4 != null && (\n                    <td>\n                      <InputBox\n                        type=\"text\"\n                        ratefiled={true}\n                        className={styles.styleInputBox}\n                        name={`floorsPerBlock.${index}.shortenedName`}\n                        placeholder=\"Enter shortened name\"\n                        errors={errors}\n                        value={row?.shortenedName}\n                        onChange={(event) =>\n                          handleUserInput(index, event, \"shortenedName\")\n                        }\n                        register={register(\n                          `floorsPerBlock.${index}.shortenedName`,\n                          {\n                            required:\n                              row?.shortenedName == \"\" ||\n                              row?.shortenedName == null\n                                ? // !saveDraft\n                                  true\n                                : false,\n                            validate: {\n                              isduplicate: (value, field) => {\n                                const { floorsPerBlock } = field;\n                                if (!value) return true;\n\n                                // Check for duplicates across all elements in floorsPerBlock\n                                const isDuplicate = floorsPerBlock.some(\n                                  (floor, i) =>\n                                    i !== index && floor.shortenedName === value\n                                );\n\n                                return !isDuplicate;\n                              },\n                            },\n                          }\n                        )}\n                      />\n                      <div className={styles.error}>\n                        <FormErrorMessage\n                          error={errors?.floorsPerBlock?.[index]?.shortenedName}\n                          messages={{\n                            required: \"Enter shortened Name is required\",\n                            isduplicate: \"Shortend Name should be unique\",\n                          }}\n                        />\n                      </div>\n                    </td>\n                  )}\n                  <td>\n                    <InputBox\n                      type=\"number\"\n                      ratefiled={true}\n                      className={styles.styleInputBox}\n                      name={`floorsPerBlock.${index}.numberOfFloors`}\n                      placeholder=\"Enter number of floors\"\n                      errors={errors}\n                      onKeyDown={numberInputMax}\n                      value={row?.numberOfFloors}\n                      onChange={(event) =>\n                        handleUserInput(index, event, \"numberOfFloors\")\n                      }\n                      register={register(\n                        `floorsPerBlock.${index}.numberOfFloors`,\n                        {\n                          required:\n                            row?.numberOfFloors == \"\" ||\n                            row?.numberOfFloors == null\n                              ? // !saveDraft\n                                true\n                              : false,\n                        }\n                      )}\n                    />\n                    <div className={styles.error}>\n                      <FormErrorMessage\n                        error={errors?.floorsPerBlock?.[index]?.numberOfFloors}\n                        messages={{\n                          required: \"Enter number of floors is required\",\n                        }}\n                      />\n                    </div>\n                  </td>\n                </tr>\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\nexport default CustomTable;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\"; // Import useDispatch\nimport styles from \"./styles.module.scss\";\nimport { updateNumRows } from \"../../../../../redux/actions/otherBlocksActions\";\nimport InputBox from \"components/UI/common/InputBox/InputBox\";\nimport { numberInputMax } from \"helpers/validation\";\nimport FormErrorMessage from \"components/UI/common/ErrorMessage\";\n\nconst BlockTable = ({\n  tabelHeader,\n  tabelHeader2,\n  errors,\n  register = () => {},\n  otherBlocksList = [],\n  handleFloorCount = () => {},\n}) => {\n  const dispatch = useDispatch(); // Get the dispatch function\n  const [userInput, setUserInput] = useState(\"\"); // State to store user input\n\n  // Function to update the number of rows based on user input\n  const handleUserInput = (index, event) => {\n    const newValue = event.target.value;\n    setUserInput(newValue);\n    const updatedList = [...otherBlocksList];\n    updatedList[index].numberOfFloors = newValue;\n    handleFloorCount(event.target.name, newValue);\n    // if (!isNaN(newValue)) {\n    //   const newNumRows = parseInt(newValue, 10);\n    //   dispatch(updateNumRows(newNumRows));\n    // }\n  };\nconsole.log(otherBlocksList)\n  return (\n    <div className={styles.ChargesForm}>\n      <div className=\"\">\n        <div className={otherBlocksList.length>0 ? styles.basicForm : styles.basicForm1}>\n            <table className={`p-0 ${styles.earlyCheckInChargesBody}`}>\n              <thead className={styles.otherChargesheading}>\n                <th className={styles.rightBorder}>\n                  <span className={styles.tableHeading}>{tabelHeader}</span>\n                </th>\n                <th className={\"\"}>\n                  <span className={styles.tableHeading}>{tabelHeader2}</span>\n                </th>\n              </thead>\n              <tbody>\n                {otherBlocksList.length > 0 &&\n                  otherBlocksList.map((item, index, array) => (\n                    <tr key={index} className={``}>\n                      {console.log(item)}\n                      <td className={` ${styles.rightBorder} text-left`}>\n                        {item.block}\n                      </td>\n                      <td className={` text-left`}>\n                        <InputBox\n                          type=\"number\"\n                          className={`small-placeholder ${styles.styleInputBox}`}\n                          ratefiled={true}\n                          // disabled={preview}\n                          name={`floorsPerBlock.${index}.numberOfFloors`}\n                          placeholder=\"Enter number of floors\"\n                          errors={errors}\n                          value={item.numberOfFloors}\n                          onKeyDown={numberInputMax}\n                          onChange={(event) => handleUserInput(index, event)}\n                          register={register(\n                            `floorsPerBlock.${index}.numberOfFloors`,\n                            {\n                              required:\n                                item.numberOfFloors == \"\" ||\n                                item.numberOfFloors == null\n                                  ? // !saveDraft\n                                    true\n                                  : false,\n                              pattern: /^[0-9\\b]+$/,\n                              validate: {\n                                max100: (value) => {\n                                  if (parseInt(value) > 100) {\n                                    return \"Maximum value is 100\";\n                                  }\n                                  return true;\n                                },\n                              },\n                            }\n                          )}\n                        />\n                        <FormErrorMessage\n                      className={styles.error}\n                          error={\n                            errors?.floorsPerBlock?.[index]?.numberOfFloors\n                          }\n                          messages={{\n                            required: \"Enter number of floors is required\",\n                            pattern: \"Enter number of floors is invalid\",\n                            max100: \"Maximum number of floors is 100\",\n                          }}\n                        />\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BlockTable;\n","import React, { useMemo } from \"react\";\nimport styles from \"./styles.module.scss\";\nimport InputBox from \"components/UI/common/InputBox/InputBox\";\nimport FormErrorMessage from \"components/UI/common/ErrorMessage\";\nimport { numberInputMax } from \"helpers/validation\";\nimport { style } from \"@mui/system\";\n\nconst FloorTable = ({\n  tabelHeader,\n  tabelHeader2,\n  tabelHeader3,\n  errors,\n  register = () => { },\n  otherFloorsList = [],\n  otherFloor = [],\n  activeTab,\n  watch,\n}) => {\n  const flatsPerFloor = watch(\"flatsPerFloor\") || [];\n  console.log(otherFloorsList);\n  const showFloorComments = useMemo(() => {\n    if (flatsPerFloor?.length)\n      return flatsPerFloor?.some(\n        (floor) => String(floor.flats) === \"0\" && floor?.block === activeTab\n      );\n    return false;\n  }, [flatsPerFloor?.some((floor) => String(floor?.flats) === \"0\"), activeTab]);\n  console.log(otherFloorsList);\n  return (\n    <div className={styles.ChargesForm}>\n      <div className=\"\">\n        <div\n          className={\n            otherFloorsList.length > 0 ? styles.basicForm : styles.basicForm1\n          }\n        >\n          <table className={`p-0 ${styles.earlyCheckInChargesBody}`}>\n            <thead className={styles.otherChargesheading}>\n              <th className={styles.rightBorder}>\n                <span className={styles.tableHeading}>{tabelHeader}</span>\n              </th>\n              <th className={showFloorComments ? styles.rightBorder : \"\"}>\n                <span className={styles.tableHeading}>{tabelHeader2}</span>\n              </th>\n              {showFloorComments && (\n                <th>\n                  <span className={styles.tableHeading}>{tabelHeader3}</span>\n                </th>\n              )}\n            </thead>\n            <tbody>\n              {otherFloorsList.length > 0 &&\n                otherFloorsList.map((item, index, array) => {\n                  console.log(item, \"item\");\n                  const Shortened = watch(\"shortened\");\n                  const blockName = watch(\"blockName\");\n                  const blockNameFormat = watch(\"blockNameFormat\");\n                  console.log(item, \"item\");\n                  console.log(blockName, Shortened, \"item\");\n                  console.log(watch(\"\"));\n                  let isDisplay = false,\n                    isEven = false;\n\n                  if (blockNameFormat === \"CUSTOM\") {\n                    if (Shortened && item.shortenedName === activeTab) {\n                      isDisplay = true;\n                    }\n                    if (!Shortened && item.blockName === activeTab) {\n                      isDisplay = true;\n                    }\n                  } else {\n                    if (item.block === activeTab) {\n                      isDisplay = true;\n                    }\n                  }\n\n                  return (\n                    <tr\n                      key={index}\n                      className={`${isDisplay == true ? styles.show : \"d-none\"\n                        } ${item.floor % 2 == 0 ? styles.odd : styles.even} `}\n\n                    >\n                      <td className={` ${styles.rightBorder} ${item?.lastIndex ? styles.leftBottomRadius : \"\"} text-left`}>\n                        {item?.floor}\n                      </td>\n                      <td\n                        className={` ${showFloorComments ? styles.rightBorder : \"\"\n                          } ${item?.lastIndex && !showFloorComments ? styles.rightBottomRadius : \"\"} text-left`}\n                      >\n                        <InputBox\n                          type=\"number\"\n                          ratefiled={true}\n                          className={`small-placeholder ${styles.styleInputBox}`}\n                          name={`flatsPerFloor.${index}.flats`}\n                          placeholder=\"Enter number of flats\"\n                          errors={errors}\n                          onKeyDown={numberInputMax}\n                          value={item?.flats}\n                          register={register(`flatsPerFloor.${index}.flats`, {\n                            required:\n                              item?.flats == \"\" || item?.flats == null\n                                ? // !saveDraft\n                                true\n                                : false,\n                            pattern: /^[0-9\\b]+$/,\n                            validate: {\n                              max100: (value) => {\n                                if (parseInt(value) > 1000) {\n                                  return \"Maximum value is 1000\";\n                                }\n                                return true;\n                              },\n                            },\n                          })}\n                        />\n\n                        <FormErrorMessage\n                          className={styles.error}\n                          error={errors?.flatsPerFloor?.[index]?.flats}\n                          messages={{\n                            required: \"Enter number of flats is required\",\n                            pattern: \"Enter number of flats is invalid\",\n                            max100: \"Maximum number of flats is 100\",\n                          }}\n                        />\n                      </td>\n                      {showFloorComments && (\n                        <td className={`${item?.lastIndex ? styles.rightBottomRadius : \"\"}`}>\n                          <span\n                            className={`col-5 text-left me-3 ${styles.comments}  `}\n                          >\n                            {String(watch(`flatsPerFloor.${index}.flats`)) ===\n                              \"0\" ||\n                              String(watch(`flatsPerFloor.${index}.flats`)) ==\n                              \"00\" ? (\n                              <p className={\"mb-0\"}>\n                                There are no flats on the ground floor as it’s a\n                                lobby\n                              </p>\n                            ) : (\n                              <p className=\"mb-0\"></p>\n                            )}\n                          </span>\n                        </td>\n                      )}\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FloorTable;\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgRedInfo1(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 14,\n    height: 14,\n    viewBox: \"0 0 14 14\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6.99479 0.335938C5.67625 0.335938 4.38732 0.726931 3.29099 1.45947C2.19467 2.19202 1.34018 3.23321 0.835598 4.45138C0.331014 5.66955 0.198991 7.01 0.456226 8.30321C0.713461 9.59641 1.3484 10.7843 2.28075 11.7166C3.2131 12.649 4.40099 13.2839 5.69419 13.5412C6.9874 13.7984 8.32784 13.6664 9.54602 13.1618C10.7642 12.6572 11.8054 11.8027 12.5379 10.7064C13.2705 9.61008 13.6615 8.32115 13.6615 7.0026C13.6615 6.12712 13.489 5.26022 13.154 4.45138C12.819 3.64254 12.3279 2.90762 11.7088 2.28856C11.0898 1.6695 10.3549 1.17844 9.54602 0.843407C8.73718 0.508376 7.87027 0.335938 6.99479 0.335938ZM6.99479 12.3359C5.93996 12.3359 4.90882 12.0231 4.03175 11.4371C3.15469 10.8511 2.4711 10.0181 2.06744 9.04358C1.66377 8.06904 1.55815 6.99669 1.76394 5.96212C1.96973 4.92756 2.47768 3.97725 3.22356 3.23137C3.96944 2.48549 4.91975 1.97754 5.95431 1.77175C6.98888 1.56596 8.06123 1.67158 9.03577 2.07525C10.0103 2.47891 10.8433 3.1625 11.4293 4.03956C12.0153 4.91662 12.3281 5.94777 12.3281 7.0026C12.3281 8.41709 11.7662 9.77365 10.766 10.7738C9.76584 11.774 8.40928 12.3359 6.99479 12.3359ZM6.99479 10.3333C7.36298 10.3333 7.66146 10.0349 7.66146 9.66667C7.66146 9.29848 7.36298 9 6.99479 9C6.6266 9 6.32812 9.29848 6.32812 9.66667C6.32812 10.0349 6.6266 10.3333 6.99479 10.3333ZM6.52339 3.86714C6.64841 3.74211 6.81798 3.67188 6.99479 3.67188C7.1716 3.67188 7.34117 3.74211 7.4662 3.86714C7.59122 3.99216 7.66146 4.16173 7.66146 4.33854V7.67188C7.66146 7.84869 7.59122 8.01825 7.4662 8.14328C7.34117 8.2683 7.1716 8.33854 6.99479 8.33854C6.81798 8.33854 6.64841 8.2683 6.52339 8.14328C6.39836 8.01825 6.32812 7.84869 6.32812 7.67188V4.33854C6.32812 4.16173 6.39836 3.99216 6.52339 3.86714Z\",\n    fill: \"#BF3939\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRedInfo1);\nexport default __webpack_public_path__ + \"static/media/redInfo1.76b80515ac47987601f49a1422735bfd.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from \"react\";\nimport { Button, Modal, Box } from \"@mui/material\";\nimport NormalButton from \"../../../UI/common/NormalButton/NormalButton\";\nimport \"./styles.scss\";\nimport InfoIcon from \"assets/icons/redInfo1.svg\";\nimport close from \"assets/icons/closeIcon.svg\";\n\nconst StructureModal = ({\n  visible,\n  modalLabel,\n  handleLeftBtn,\n  handleRightBtnClick,\n  modalDesc,\n  rightSideBtn = () => {},\n  leftSideBtn = () => {},\n  handleClose = () => {},\n  handleCloseBtn=false\n}) => {\n  return (\n    <div className=\"col-8\">\n      <Modal\n        open={visible}\n        onClose={handleLeftBtn}\n        aria-labelledby=\"modal-title\"\n        aria-describedby=\"modal-description\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: 430,\n            borderRadius: \"16px\",\n            bgcolor: \"background.paper\",\n            boxShadow: 24,\n            p: 4,\n          }}\n        >\n          {handleCloseBtn &&\n          <div className=\"cursor-pointer\" onClick={ handleClose}>\n            <img\n              src={close}\n              style={{ position: \"absolute\", right: \"5%\", top: \"5%\" }}\n            />\n          </div>}\n          <p id=\"modal-description\" className=\"fw-600 text-center mt-4\">\n            {modalLabel}\n          </p>\n          <div\n            className={`basicForm  d-flex align-items-center justify-content-center px-4`}\n          >\n            <img\n              src={InfoIcon}\n              className=\"me-2 mb-auto \"\n              style={{ marginTop: \"2px\" }}\n            />{\" \"}\n            <label className=\"mb-0\">{modalDesc}</label>\n          </div>\n          <div className=\"d-flex w-100 col-12 justify-content-center my-4 \">\n            <div className=\"col-6 px-1 \">\n              <NormalButton\n                className={\"cancelBtn w-100 \"}\n                label={leftSideBtn}\n                onClick={ handleLeftBtn}\n              />\n            </div>\n            <div className=\"col-6 px-3\">\n              <NormalButton\n                onClick={ handleRightBtnClick}\n                className={\"submitBtn w-100 \"}\n                label={rightSideBtn}\n              />\n            </div>\n          </div>\n          {/* <Button onClick={handleLeftBtn}>Close</Button> */}\n        </Box>\n      </Modal>\n    </div>\n  );\n};\n\nexport default StructureModal;\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgHorizontalLine(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 14,\n    height: 2,\n    viewBox: \"0 0 14 2\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13 1L1 1\",\n    stroke: \"#787C7E\",\n    strokeLinecap: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHorizontalLine);\nexport default __webpack_public_path__ + \"static/media/horizontalLine.a6c5f74145e133f0f79fe380247e6ce3.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState, useMemo, memo } from \"react\";\nimport styles from \"./index.module.scss\";\n\nimport FormErrorMessage from \"components/UI/common/ErrorMessage\";\nimport InputBox from \"components/UI/common/InputBox/InputBox\";\n\nimport { useForm } from \"react-hook-form\";\nimport NormalButton from \"components/UI/common/NormalButton/NormalButton\";\n\nimport RadioButton from \"../../UI/common/RadioButton\";\nimport CheckBox from \"../../UI/common/CheckBox/CommonCheckBox\";\n\nimport UnitNamingTab from \"components/UI/common/Tab/UnitNamingTab/UnitNamingTab\";\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\nimport CustomTable from \"./CustomTable\";\n\nimport StructureModal from \"./StructureModal/StructureModal\";\nimport BlockTable from \"./InventoryTable/BlockTable\";\nimport FloorTable from \"./InventoryTable/FloorTable\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setBlockSequenceStart,\n  setBlockSequenceEnd,\n} from \"../../../redux/actions/blockSequenceActions\";\nimport { updateOtherBlocksList } from \"../../../redux/actions/otherBlocksActions\";\nimport Toggle from \"components/UI/common/Toggle\";\nimport CustomController from \"components/UI/common/Controller\";\nimport { generateSequence } from \"Constants/helperFunctions\";\nimport { numberInput, numberInputMax } from \"helpers/validation\";\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\";\nimport { styled } from \"@mui/material/styles\";\nimport horizontalLine from \"assets/icons/horizontalLine.svg\";\nimport debounce from \"lodash/debounce\";\n\nconst InventorySetUp = ({ handleNextTab }) => {\n  const inventorySetUp = useSelector((state) => state.unitForm.inventorySetUp);\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    reset,\n    clearErrors,\n    control,\n    watch,\n    formState: { errors, dirtyFields, isDirty },\n  } = useForm({\n    mode: \"onChange\",\n    defaultValues: inventorySetUp,\n  });\n  console.log(inventorySetUp);\n  const dispatch = useDispatch();\n  const blockSequenceStart = useSelector(\n    (state) => state.blockSequence.blockSequenceStart\n  );\n  const blockSequenceEnd = useSelector(\n    (state) => state.blockSequence.blockSequenceEnd\n  );\n  const otherBlocksList = useSelector(\n    (state) => state.otherBlocks.otherBlocksList\n  );\n  const initialData = Array.from(\n    { length: getValues(\"numberOfBlocks\") || 1 },\n    (_, i) => ({\n      block: `Block ${i + 1}`,\n      numberOfFloors: \"\",\n      blockName: \"\",\n      shortenedName: \"\",\n    })\n  );\n  const [saveDraft, setSaveDraft] = useState(false);\n  const [showError, setShowError] = useState(false);\n\n  const [activeTab, setActiveTab] = useState(null);\n  const [openModal, setOpenModal] = useState(false);\n  const [openDeleteModal, setOpenDeleteModal] = useState(false);\n\n  const [blockFloorValues, setBlockFloorValues] = useState({});\n  const [structureType, setStructureType] = useState(\"FLATWISE\");\n  const [duplicate, setduplicate] = useState(false);\n  const [FloorTableChange, setFloorTableChange] = useState(false);\n  const [rooms, setRooms] = useState(true);\n  const [beds, setBeds] = useState(true);\n  const [showFloorComments, setshowFloorComments] = useState(false);\n  const [tableData, setTableData] = useState(initialData);\n  const [isBlockChanged, setIsBlockChanged] = useState(false);\n  const [blockTabs, setBlockTabs] = useState([]);\n\n  console.log(tableData);\n  const LightTooltip = styled(({ className, ...props }) => (\n    <Tooltip {...props} classes={{ popper: className }} />\n  ))(({ theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n      backgroundColor: theme.palette.common.white,\n      color: \"#000\",\n      boxShadow: theme.shadows[5],\n      fontSize: 11,\n      width: \"180px\",\n      margin: \"20px -15px 0 0px\",\n      borderRadius: \"10px\",\n    },\n\n    [`& .${tooltipClasses.arrow}`]: {\n      color: \"#FFFFFF\",\n      margin: \"0 0px 0 -7px\",\n    },\n  }));\n\n  const generateFloorValues = (floorsPerBlock) => {\n    console.log(floorsPerBlock);\n    return floorsPerBlock?.flatMap((floorDetails) => {\n      if (\n        floorDetails?.numberOfFloors > 0 &&\n        !isNaN(floorDetails?.numberOfFloors)\n      ) {\n        return Array.from({ length: floorDetails?.numberOfFloors }, (_, i) => ({\n          block: floorDetails?.block,\n          floor: i,\n          flats: \"\",\n          blockName: floorDetails?.blockName,\n          shortenedName: floorDetails?.shortenedName,\n          lastIndex: floorDetails?.numberOfFloors - 1 === i,\n        }));\n      }\n      return [\n        {\n          block: floorDetails?.block,\n          floor: 0,\n          blockName: floorDetails?.blockName,\n          shortenedName: floorDetails?.shortenedName,\n          lastIndex: true,\n        },\n      ];\n    });\n  };\n\n  //  floor generated\n  const getBlockFloors = () => {\n    const flatsPerFloor = watch(\"flatsPerFloor\");\n    const floorsPerBlock = watch(\"floorsPerBlock\");\n    const blockNameFormat = watch(\"blockNameFormat\");\n    console.log(flatsPerFloor);\n    console.log(floorsPerBlock);\n\n    let result = [];\n    if (\n      activeTab != null &&\n      flatsPerFloor?.length &&\n      blockNameFormat !== \"CUSTOM\"\n    ) {\n      result = flatsPerFloor.filter((a) => a.block === activeTab);\n    } else if (\n      activeTab != null &&\n      flatsPerFloor?.length &&\n      blockNameFormat == \"CUSTOM\"\n    ) {\n      result = flatsPerFloor.filter((a) => a.blockName === activeTab);\n    }\n    console.log(\"reasultttt\", { result, floorsPerBlock, flatsPerFloor });\n    return result;\n  };\n\n  const handleTabChange = (block) => {\n    // Replace this with the actual logic to get the number of floors for the selected block\n    const numberOfFloors = \"getNumberOfFloorsForBlock(block)\";\n    // Update the state with the number of floors for the selected block\n    setBlockFloorValues({ ...blockFloorValues, [block]: numberOfFloors });\n  };\n\n  const handleFloorCount = (name, value) => {\n    setValue(name, value);\n    console.log(name, value);\n\n    const floorsPerBlock = watch(\"floorsPerBlock\");\n    console.log(floorsPerBlock);\n\n    if (floorsPerBlock?.length) {\n      setValue(\"flatsPerFloor\", generateFloorValues(floorsPerBlock));\n    } else {\n      setValue(\"flatsPerFloor\", []);\n    }\n    if (watch(\"blockNameFormat\") === \"CUSTOM\") {\n      setBlockTabs(\n        floorsPerBlock.map((_, i) => ({\n          title:\n            watch(\"shortened\") == true\n              ? floorsPerBlock[i].shortenedName || floorsPerBlock[i].block\n              : floorsPerBlock[i].blockName || floorsPerBlock[i].block,\n          index: i + 1,\n        }))\n      );\n      console.log(blockTabs);\n    }\n    console.log(watch(\"flatsPerFloor\"));\n    if (\n      // floorsPerBlock[0]?.shortenedName !== \"\" &&\n      watch(\"blockNameFormat\") === \"CUSTOM\" &&\n      watch(\"shortened\") == true\n    ) {\n      console.log(\n        \"shoetttt true\",\n        floorsPerBlock[0]?.shortenedName,\n        floorsPerBlock[0]?.block\n      );\n      setActiveTab(\n        String(floorsPerBlock[0]?.shortenedName || floorsPerBlock[0]?.block)\n      );\n    } else if (\n      // floorsPerBlock[0]?.blockName !== \"\" &&\n      watch(\"blockNameFormat\") === \"CUSTOM\" &&\n      watch(\"shortened\") == false\n    ) {\n      console.log(\n        \"shoetttt false\",\n        floorsPerBlock[0]?.shortenedName,\n        floorsPerBlock[0]?.block\n      );\n      setActiveTab(\n        String(floorsPerBlock[0]?.blockName || floorsPerBlock[0]?.block)\n      );\n    }\n  };\n\n  useEffect(() => {\n    console.log(watch(\"sequenceFrom\"));\n    console.log(watch(\"buildingName\"));\n    console.log(watch(\"blockNameFormat\"));\n\n    // let startValue;\n    if (watch(\"blockNameFormat\") !== \"CUSTOM\") {\n      let startValue = watch(\"sequenceFrom\") || watch(\"buildingName\");\n\n      console.log(startValue);\n\n      const { endValue, inBetweenSequence = [] } = generateSequence(\n        watch(\"blockNameFormat\"),\n        startValue,\n        watch(\"numberOfBlocks\") - 1\n      );\n      setValue(\"sequenceTo\", endValue);\n      console.log(inBetweenSequence);\n\n      const floorsData = inBetweenSequence.map((a) => ({\n        block: a,\n        numberOfFloors: \"\",\n      }));\n\n      setValue(\"floorsPerBlock\", floorsData);\n      setBlockTabs(\n        floorsData.map((_, i) => ({ title: floorsData[i].block, index: i + 1 }))\n      );\n\n      console.log(blockTabs);\n    } else if (watch(\"blockNameFormat\") == \"CUSTOM\") {\n      setValue(\"floorsPerBlock\", null);\n      const count = watch(\"numberOfBlocks\");\n      console.log(count);\n      const result = [];\n\n      const initialData = Array.from({ length: count || 1 }, (_, i) => ({\n        block: `Block ${i + 1}`,\n        numberOfFloors: \"\",\n        blockName: \"\",\n        shortenedName: \"\",\n      }));\n      console.log(initialData);\n      setValue(\"floorsPerBlock\", initialData);\n      setBlockTabs(\n        initialData.map((_, i) => ({\n          title: initialData[i].blockName,\n          index: i + 1,\n        }))\n      );\n      setValue(\"sequenceFrom\", result[0]);\n    }\n    console.log(watch(\"floorsPerBlock\"));\n    console.log(blockTabs);\n  }, [\n    watch(\"blockNameFormat\"),\n    watch(\"sequenceFrom\"),\n    watch(\"numberOfBlocks\") - 1,\n    watch(\"buildingName\"),\n    // watch(\"shortened\"),\n  ]);\n\n  useEffect(() => {\n    const floorsPerBlock = watch(\"floorsPerBlock\");\n    console.log(floorsPerBlock);\n    if (floorsPerBlock?.length) {\n      setValue(\"flatsPerFloor\", generateFloorValues(floorsPerBlock));\n    } else {\n      setValue(\"flatsPerFloor\", []);\n    }\n    console.log(watch(\"sequenceFrom\"));\n    console.log(watch(\"buildingName\"));\n    console.log(watch(\"flatsPerFloor\"));\n    console.log(watch(\"blockNameFormat\"));\n    console.log(String(floorsPerBlock[0]?.blockName));\n\n    if (watch(\"blockNameFormat\") === \"CUSTOM\") {\n      setBlockTabs(\n        floorsPerBlock.map((_, i) => ({\n          title:\n            watch(\"shortened\") == true\n              ? floorsPerBlock[i].shortenedName\n              : floorsPerBlock[i].blockName,\n          index: i + 1,\n        }))\n      );\n      console.log(blockTabs);\n    }\n\n    if (\n      watch(\"buildingName\") == null &&\n      watch(\"blockNameFormat\") !== \"CUSTOM\"\n    ) {\n      setActiveTab(String(watch(\"sequenceFrom\")).toUpperCase());\n    } else if (\n      watch(\"sequenceFrom\") == null &&\n      watch(\"blockNameFormat\") !== \"CUSTOM\"\n    ) {\n      // setActiveTab(watch(\"buildingName\"));\n      setActiveTab(String(watch(\"buildingName\")).toUpperCase());\n    } else if (\n      floorsPerBlock[0]?.shortenedName !== \"\" &&\n      watch(\"blockNameFormat\") === \"CUSTOM\" &&\n      watch(\"shortened\") == true\n    ) {\n      setActiveTab(String(floorsPerBlock[0]?.shortenedName));\n    } else if (\n      floorsPerBlock[0]?.blockName !== \"\" &&\n      watch(\"blockNameFormat\") === \"CUSTOM\" &&\n      watch(\"shortened\") == false\n    ) {\n      setActiveTab(String(floorsPerBlock[0]?.blockName));\n    }\n    console.log(floorsPerBlock);\n  }, [\n    watch(\"blockNameFormat\"),\n    watch(\"sequenceFrom\"),\n    watch(\"buildingName\"),\n    watch(\"numberOfBlocks\"),\n    watch(\"floorsPerBlock\"),\n    watch(\"shortened\"),\n  ]);\n\n  const addEmptyItem = () => {\n    const newItem = { block: \"\", numFloors: \"\" };\n    const updatedBlocksList = [...otherBlocksList, newItem];\n    dispatch(updateOtherBlocksList(updatedBlocksList));\n  };\n\n  const deleteItem = (value) => {\n    const updatedList = otherBlocksList.filter(\n      (item, index) => index !== value\n    );\n\n    // setOtherBlocksList(updatedList);\n    dispatch(updateOtherBlocksList(updatedList));\n  };\n\n  const handleSaveDraft = () => {\n    setSaveDraft(true);\n    handleSubmit(onsubmit);\n    setTimeout(() => {\n      setSaveDraft(false);\n    }, 500);\n    handleNextTab();\n  };\n\n  const checkIsStructure = (data, type) => {\n    console.log(\n      {\n        structureType,\n        rooms,\n        beds,\n        formstructureType: getValues(\"structureType\"),\n        formrooms: getValues(\"rooms\"),\n        formBeds: getValues(\"beds\"),\n      },\n      \"dsf\"\n    );\n    if (\n      (type == \"structureType\"\n        ? getValues(\"structureType\") !== data\n        : getValues(\"structureType\") !== structureType) ||\n      (data == \"rooms\"\n        ? getValues(\"rooms\") !== !rooms\n        : getValues(\"rooms\") !== rooms) ||\n      (data == \"beds\"\n        ? getValues(\"beds\") !== !beds\n        : getValues(\"beds\") !== beds)\n    ) {\n      setIsBlockChanged(true);\n    } else {\n      setIsBlockChanged(false);\n    }\n  };\n\n  console.log(getValues(\"rooms\"));\n  console.log(getValues(\"beds\"));\n  console.log(structureType);\n  console.log(rooms, beds);\n\n  const handleRadioChange = (data, type) => {\n    console.log(type, data);\n    if (type === \"structureType\") {\n      setStructureType(data);\n      // setValue(type, data);\n      if (data === \"ROOMWISE\") {\n        setRooms(false);\n      }\n      setTimeout(() => {}, 100);\n      checkIsStructure(data, type);\n    }\n    if (type === \"structureRoomType\") {\n      if (data == \"rooms\") {\n        setRooms(!rooms);\n      } else if (data == \"beds\") {\n        setBeds(!beds);\n      }\n\n      setTimeout(() => {}, 100);\n      checkIsStructure(data, type);\n    }\n  };\n\n  useEffect(() => {\n    if (structureType == \"FLATWISE\" && !rooms && beds) {\n      setShowError(true);\n    } else if (structureType == \"FLATWISE\" ) {\n      setShowError(false);\n    }\n  }, [handleRadioChange]);\n\n  // Handle changes in the input values\n  const handleInputValueChange = (name, value) => {\n    // return(\"\")\n    setValue(name, value);\n\n    if (name === \"sequenceFrom\") {\n      dispatch(setBlockSequenceStart(value));\n      const { endValue } = generateSequence(\n        watch(\"blockNameFormat\"),\n        value,\n        watch(\"numberOfBlocks\") - 1\n      );\n      handleInputValueChange(\"sequenceTo\", endValue);\n    } else if (name === \"buildingName\") {\n      dispatch(setBlockSequenceStart(value));\n      const { endValue } = generateSequence(\n        watch(\"blockNameFormat\"),\n        value,\n        watch(\"numberOfBlocks\") - 1\n      );\n      handleInputValueChange(\"sequenceTo\", endValue);\n    } else if (name === \"sequenceTo\") {\n      dispatch(setBlockSequenceEnd(value));\n    }\n  };\n\n  const handleApplyStructure = (isReset) => {\n    if (isReset) {\n      setStructureType(\"FLATWISE\");\n      setRooms(true);\n      setBeds(true);\n      setOpenDeleteModal(false);\n      reset(inventorySetUp);\n    } else {\n      reset({ ...inventorySetUp, structureType, rooms, beds });\n    }\n    setIsBlockChanged(false);\n  };\n\n  const blockLevelFloors = useMemo(() => {\n    return getBlockFloors();\n  }, [activeTab, handleFloorCount]);\n\n  useEffect(() => {\n    setValue(\"sequenceFrom\", null);\n    setValue(\"sequenceTo\", null);\n    // if (watch(\"blockNameFormat\") == \"CUSTOM\") {\n    //   setValue(\"numberOfBlocks\", null);\n    // }\n    setValue(\"buildingName\", null);\n\n    setValue(\"flatsPerFloor\", [\n      {\n        block: \"\",\n        floor: \"\",\n        flats: \"\",\n      },\n    ]);\n    if (watch(\"blockNameFormat\") === \"CUSTOM\" && watch(\"numberOfBlock\") == \"\") {\n      setValue(\"floorsPerBlock\", [\n        {\n          block: \"Block1\",\n          numberOfFloors: \"\",\n          shortenedName: \"\",\n          blockName: \"\",\n        },\n      ]);\n    } else if (\n      watch(\"blockNameFormat\") !== \"CUSTOM\" &&\n      watch(\"numberOfBlock\") == \"\"\n    ) {\n      setValue(\"floorsPerBlock\", [\n        {\n          block: \"\",\n          numberOfFloors: \"\",\n          shortenedName: \"\",\n          blockName: \"\",\n        },\n      ]);\n    }\n  }, [watch(\"blockNameFormat\")]);\n\n  useEffect(() => {\n    console.log(\n      \"blockLevelFloors\",\n      blockLevelFloors,\n      blockLevelFloors[0]?.flats\n    );\n    if (\n      blockLevelFloors.length > 0 &&\n      blockLevelFloors[0]?.flats == String(0)\n    ) {\n      setshowFloorComments(true);\n    } else {\n      setshowFloorComments(false);\n    }\n  }, [blockLevelFloors]);\n  console.log(watch(\"floorsPerBlock\"));\n\n  const onsubmit = (data) => {\n    setOpenModal(true);\n  };\n\n  return (\n    <div className={styles.basicInfo}>\n      <div className={styles.contentPart}>\n        <div className=\"new-section py-2 \">\n          <div className={styles.basicTitle}>\n            <h3 className={styles.propertyLabel}>Structure Details</h3>\n          </div>\n          <div className={`${styles.basicForm} px-4`}>\n            <div className={`row`}>\n              <div className=\"col-12 col-md-3 py-2\">\n                <label>Structure Type</label>\n                <div className=\"d-flex align-items-center gap-5 my-2\">\n                  <RadioButton\n                    label=\"Flatwise\"\n                    value=\"FLATWISE\"\n                    checkedValue={structureType}\n                    className=\"bg-primary-2 pl-1\"\n                    onRadioChange={(value) =>\n                      handleRadioChange(value, \"structureType\")\n                    }\n                  />\n                  <RadioButton\n                    label=\"Roomwise\"\n                    value=\"ROOMWISE\"\n                    checkedValue={structureType}\n                    className=\"bg-primary-2 pl-1\"\n                    onRadioChange={(value) =>\n                      handleRadioChange(value, \"structureType\")\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n            <div className={`row`}>\n              <div className=\"col-12 col-md-3 py-2\">\n                <label>Structure Configuration</label>\n                <div className=\"d-flex align-items-center gap-5 my-2\">\n                  {structureType === \"FLATWISE\" && (\n                    <div className=\"d-flex align-items-center\">\n                      <CheckBox\n                        name=\"rooms\"\n                        isChecked={rooms}\n                        onChange={() =>\n                          handleRadioChange(\"rooms\", \"structureRoomType\")\n                        }\n                      />\n                      <label className=\"m-0 px-3 fs-14 bg-primary-2 pl-1\">\n                        Rooms\n                      </label>\n                    </div>\n                  )}\n                  <div className=\"d-flex align-items-center\">\n                    <CheckBox\n                      name=\"beds\"\n                      isChecked={beds}\n                      onChange={() =>\n                        handleRadioChange(\"beds\", \"structureRoomType\")\n                      }\n                    />\n                    <label className=\"m-0 px-3 fs-14 bg-primary-2 pl-1\">\n                      Beds\n                    </label>\n                  </div>\n                  {/* {structureType === \"FLATWISE\" && (\n                    <div className=\"d-flex align-items-center\">\n                      <CustomController\n                        name={`rooms`}\n                        control={control}\n                        //defaultValue={false} // Set the initial value\n                        render={({ field: { onChange, value }, fields }) => (\n                          <CheckBox\n                            {...fields}\n                            name=\"rooms\"\n                            isChecked={structureRoomType.includes(\"rooms\")}\n                            onChange={() =>\n                              handleRadioChange(\"rooms\", \"structureRoomType\")\n                            }\n                            register={register(`rooms`, {\n                              validate: {\n                                required: (value) => {\n                                  if (!Boolean(value) && getValues(`rooms`)) {\n                                    return true;\n                                  } else {\n                                    clearErrors(`rooms`);\n                                  }\n                                  return Boolean(value);\n                                },\n                              },\n                            })}\n                          />\n                        )}\n                      />\n                      <label className=\"m-0 px-3 fs-14\">Rooms</label>\n                    </div>\n                  )}\n                  <div className=\"d-flex align-items-center  \">\n                    <CustomController\n                      name={`beds`}\n                      control={control}\n                      //defaultValue={false} // Set the initial value\n                      render={({ field: { onChange, value }, fields }) => (\n                        <CheckBox\n                          {...fields}\n                          name=\"beds\"\n                          isChecked={structureRoomType.includes(\"beds\")}\n                          onChange={() =>{\n                            console.log(\"as\");\n                            handleRadioChange(\"beds\", \"structureRoomType\")}\n                          }\n                          register={register(`beds`, {\n                            validate: {\n                              required: (value) => {\n                                if (!Boolean(value) && getValues(`beds`)) {\n                                  return true;\n                                } else {\n                                  clearErrors(`beds`);\n                                }\n                                return Boolean(value);\n                              },\n                            },\n                          })}\n                        />\n                      )}\n                    /> \n                    {console.log(structureRoomType)}\n                    <label className=\"m-0 px-3 fs-14\">Beds</label>\n                  </div> */}\n                </div>\n                {console.log(showError)}\n                {structureType === \"FLATWISE\" && showError && (\n                  <div>\n                    <span className=\"error-message\">\n\n                          rooms are required\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <hr />\n            <div className={`d-flex ${styles.btn} pb-3  `}>\n              <div>\n                <NormalButton\n                  className={\"submitBtn applyStructure\"}\n                  label={\"Apply Structure\"}\n                  onClick={() => handleApplyStructure(false)}\n                  disabled={!isBlockChanged}\n                />\n              </div>\n              {console.log(structureType)}\n              <div>\n                <NormalButton\n                  className={\"resetBtn\"}\n                  label={\"Reset\"}\n                  onClick={() => setOpenDeleteModal(true)}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-md-3 py-2 mt-3\">\n            <label className={styles.propertyLabel}>\n              Are there blocks in the property?{\" \"}\n            </label>\n            <div className=\"d-flex align-items-center gap-3 my-2 \">\n              <div className=\"d-flex align-items-center   \">\n                <RadioButton\n                  label=\"Yes\"\n                  value={true}\n                  className=\"m-0 px-1 pl-1 bg-primary-2\"\n                  checkedValue={watch(\"isBlocks\")}\n                  onRadioChange={(value) => {\n                    handleRadioChange(value, \"blockType\");\n                    setValue(\"isBlocks\", true);\n                    setValue(\"numberOfBlocks\", null);\n                  }}\n                  // checkedValue={blockType}\n                  // onRadioChange={(value) => handleRadioChange(value, \"blockType\")}\n                />\n              </div>\n              <div className=\"d-flex align-items-center  mx-4 \">\n                <RadioButton\n                  label=\"No\"\n                  value={false}\n                  className=\"pl-1 bg-primary-2\"\n                  checkedValue={watch(\"isBlocks\")}\n                  onRadioChange={(value) => {\n                    handleRadioChange(value, \"blockType\");\n                    setValue(\"isBlocks\", false);\n                    setValue(\"numberOfBlocks\", 1);                    \n                    setValue(\"blockNameFormat\", \"CUSTOM\");\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n          {watch(\"isBlocks\") && (\n            <div className={`col-md-3 ${styles.rowWidth1} py-2`}>\n              <label>Number of blocks</label>\n              <InputBox\n                className=\"login_input\"\n                type=\"number\"\n                onKeyDown={numberInputMax}\n                name={\"numberOfBlocks\"}\n                placeholder={`${String(\"Enter total no. of blocks\")}`}\n                register={register(\"numberOfBlocks\", {\n                  required: true,\n                  min: 2,\n                  pattern: /^(?!\\s*$).+/,\n                  validate: {\n                    max100: (value) => {\n                      if (parseInt(value) > 50) {\n                        return \"Maximum value is 50\";\n                      }\n                      return true;\n                    },\n                  },\n                })}\n                onChange={({ target: { name, value } }) => {\n                  setValue(name, value, { shouldValidate: true });\n                  setValue(\"sequenceFrom\", null);\n                  setValue(\"sequenceTo\", null);\n                  setValue(\"buildingName\", null);\n                }}\n              />\n              <FormErrorMessage\n                error={errors.numberOfBlocks}\n                messages={{\n                  required: \"Block number is required \",\n                  pattern: \"Block number is Invalid\",\n                  min: \"Minimun number of Blocks is 2\",\n                  max100: \"Maximum number of Blocks is 50\",\n                }}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"new-section py-3\">\n          <div className={styles.basicTitle}>\n            <h3 className={styles.propertyLabel}>\n              {watch(\"isBlocks\") ? \"Block Details\" : \"Building Details\"}{\" \"}\n            </h3>\n          </div>\n          <div className={`${styles.basicForm2} `}>\n            <div className={`row`}>\n              <div className=\"col-12 col-md-3 py-2\">\n                {watch(\"isBlocks\") ? (\n                  <label>Select a block name format </label>\n                ) : (\n                  <label>Select a building name format </label>\n                )}\n                <div\n                  className={` d-flex align-items-center  my-2 ${styles.gap}`}\n                >\n                  <RadioButton\n                    label=\"Numeric\"\n                    value=\"NUMERIC\"\n                    className=\"pr-05 pl-1 bg-primary-2\"\n                    checkedValue={watch(\"blockNameFormat\")}\n                    onRadioChange={(val) => {\n                      handleRadioChange(val);\n                      watch(\"isBlocks\") == true ?\n                        setValue(\"blockNameFormat\", \"NUMERIC\") : setValue(\"blockNameFormat\", \"CUSTOM\");\n                    }}\n                    disabled={watch(\"isBlocks\") ? true : false }\n                  />\n                  <LightTooltip\n                    title={\n                      <div className=\"p-1\">\n                        The block name format can only be in the form of\n                        numbers. E.g: 1,2,3 etc.\n                      </div>\n                    }\n                    placement=\"bottom-start\"\n                    style={{ backgroundColor: \"white\" }}\n                  >\n                    <InfoOutlinedIcon className={`${styles.iconbtn} `} />\n                  </LightTooltip>\n                  <RadioButton\n                    label=\"Alphabetic\"\n                    value=\"ALPHABETIC\"\n                    className=\"pr-05 pl-1 bg-primary-2\"\n                    checkedValue={watch(\"blockNameFormat\")}\n                    onRadioChange={(val) => {\n                      handleRadioChange(val);\n                      watch(\"isBlocks\") == true ?\n                      setValue(\"blockNameFormat\", \"ALPHABETIC\") : setValue(\"blockNameFormat\", \"CUSTOM\");\n                    }}\n                    disabled={watch(\"isBlocks\") ? true : false }\n                  />\n                  <LightTooltip\n                    title={\n                      <div className=\"p-1\">\n                        The block name format can only be alphabetical. E.g:\n                        A,B,C etc.\n                      </div>\n                    }\n                    placement=\"bottom-start\"\n                    style={{ backgroundColor: \"white\" }}\n                  >\n                    <InfoOutlinedIcon className={`${styles.iconbtn} `} />\n                  </LightTooltip>\n                  <RadioButton\n                    label=\"Alphanumeric\"\n                    value=\"ALPHANUMERIC\"\n                    checkedValue={watch(\"blockNameFormat\")}\n                    className=\"pr-05 pl-1 bg-primary-2\"\n                    onRadioChange={(val) => {\n                      handleRadioChange(val);\n                      watch(\"isBlocks\") == true ?\n                      setValue(\"blockNameFormat\", \"ALPHANUMERIC\") : setValue(\"blockNameFormat\", \"CUSTOM\");\n                    }}\n                    disabled={watch(\"isBlocks\") ? true : false }\n                  />\n                  <LightTooltip\n                    title={\n                      <div className=\"p-1\">\n                        The block name format has to be a combination of\n                        alphabet and number. E.g: A1,B1,C1 etc.\n                      </div>\n                    }\n                    placement=\"bottom-start\"\n                    style={{ backgroundColor: \"white\" }}\n                  >\n                    <InfoOutlinedIcon className={`${styles.iconbtn} `} />\n                  </LightTooltip>\n                  <RadioButton\n                    label=\"Custom\"\n                    value=\"CUSTOM\"\n                    checkedValue={watch(\"blockNameFormat\")}\n                    onRadioChange={(val) => {\n                      handleRadioChange(val);\n                      watch(\"isBlocks\") == true &&\n                        setValue(\"blockNameFormat\", \"CUSTOM\");\n                    }}\n                    className=\"x-2 pr-05 pl-1 bg-primary-2\"\n                  />\n                  <LightTooltip\n                    title={\n                      <div className=\"px-1 py-1\">\n                        The block name format can be a custom name with no\n                        specific constraints. E.g: Mars, Pluto etc.\n                      </div>\n                    }\n                    placement=\"bottom-start\"\n                    style={{ backgroundColor: \"white\" }}\n                  >\n                    <InfoOutlinedIcon className={`${styles.iconbtn} `} />\n                  </LightTooltip>\n                </div>\n              </div>\n            </div>\n            {[\"ALPHANUMERIC\", \"NUMERIC\", \"ALPHABETIC\"].includes(\n              watch(\"blockNameFormat\")\n            ) ? (\n              <div>\n                <label>\n                  {watch(\"isBlocks\")\n                    ? \"Enter Block Sequence\"\n                    : \"Enter Building Name\"}\n                </label>\n                <div className={` d-flex align-items-center  py-2  `}>\n                  <div\n                    className={` d-flex align-items-center   ${styles.rowWidth} m-0  `}\n                  >\n                    {watch(\"isBlocks\") ? (\n                      <InputBox\n                        className=\"login_input\"\n                        type={\n                          watch(\"blockNameFormat\") === \"NUMERIC\"\n                            ? \"number\"\n                            : \"text\"\n                        }\n                        name=\"sequenceFrom\"\n                        placeholder={\n                          watch(\"blockNameFormat\") === \"NUMERIC\"\n                            ? \"Eg. 1\"\n                            : watch(\"blockNameFormat\") === \"ALPHANUMERIC\"\n                            ? \"Eg. A1\"\n                            : \"Eg. A\"\n                        }\n                        registerBlock={true}\n                        register={register(\"sequenceFrom\", {\n                          required: true,\n                          pattern: /^(?!\\s*$).+/,\n                          validate: (value, field) => {\n                            if (watch(\"blockNameFormat\") === \"ALPHABETIC\") {\n                              if (/^[A-Za-z]+$/.test(value)) {\n                                return true;\n                              } else {\n                                return false;\n                              }\n                            }\n\n                            return true;\n                          },\n                        })}\n                        onChange={({ target: { name, value } }) => {\n                          if (watch(\"blockNameFormat\") === \"ALPHABETIC\") {\n                            const onlyLetters = String(value).replace(\n                              /[^A-Za-z]/g,\n                              \"\"\n                            ); // Remove non-letter characters\n                            console.log(onlyLetters);\n                            handleInputValueChange(\n                              name,\n                              onlyLetters?.toUpperCase() || onlyLetters\n                            );\n                          } else {\n                            handleInputValueChange(\n                              name,\n                              value?.toUpperCase?.() || value\n                            );\n                          }\n                        }}\n                        onKeyDown={\n                          watch(\"blockNameFormat\") === \"NUMERIC\"\n                            ? numberInput\n                            : null\n                        }\n                        value={watch(\"sequenceFrom\")}\n                      />\n                    ) : (\n                      <div className=\"d-block\">\n                        <InputBox\n                          className=\"login_input\"\n                          type=\"text\"\n                          name={\"buildingName\"}\n                          placeholder=\"Eg. Majestine\"\n                          register={register(\"buildingName\", {\n                            pattern: /^(?!\\s*$).+/,\n                            validate: (value, field) => {\n                              if (field.isDraft) return true;\n                              if (value && value.length <= 100) return true;\n                              return false;\n                            },\n                          })}\n                          onChange={({ target: { name, value } }) =>\n                            handleInputValueChange(name, value)\n                          }\n                          value={watch(\"buildingName\")}\n                        />\n                        <FormErrorMessage\n                          error={errors.buildingName}\n                          messages={{\n                            validate: \"Building Name is required\",\n                            pattern: \"Building Name is Invalid\",\n                          }}\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  {watch(\"isBlocks\") && (\n                    <img className=\"mx-3\" src={horizontalLine} />\n                  )}\n                  {watch(\"isBlocks\") && (\n                    <div\n                      className={` ${styles.rowWidth} d-flex align-items-center `}\n                    >\n                      <InputBox\n                        className=\"login_input\"\n                        type=\"text\"\n                        onKeyDown={numberInput}\n                        readOnly={true}\n                        name={\"sequenceTo\"}\n                        placeholder={\n                          watch(\"blockNameFormat\") === \"NUMERIC\"\n                            ? \"Eg. 5\"\n                            : watch(\"blockNameFormat\") === \"ALPHANUMERIC\"\n                            ? \"Eg. A5\"\n                            : \"Eg. D\"\n                        }\n                        register={register(\"sequenceTo\", {\n                          required: false,\n                        })}\n                        onChange={({ target: { name, value } }) =>\n                          handleInputValueChange(name, value)\n                        }\n                        value={watch(\"sequenceTo\")}\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {watch(\"isBlocks\") && (\n                  <FormErrorMessage\n                    error={errors.sequenceTo}\n                    messages={{\n                      pattern: \"Block Sequence is required\", // Message for the pattern validation\n                      validate: \"Block sequence is Invalid\", // Message for custom validation\n                      alphabetic: \"Block sequence should only contain letters\", // Message for alphabetic validation\n                      required: \"Block sequence is required\", // Message for the required validation\n                    }}\n                  />\n                )}\n              </div>\n            ) : null}\n            {console.log(watch(\"blockNameFormat\"))}\n            <div className=\"new-section py-3\">\n              <div className={`col-10 ${styles.table}`}>\n                {watch(\"blockNameFormat\") === \"CUSTOM\" ? (\n                  <div>\n                    <label className=\"py-2 d-flex gap-2 align-items-center\">\n                      <span>Display shortened block name</span>\n                      <LightTooltip\n                        title={\n                          <div className=\"p-1\">\n                            Total number of floors is inclusive of ground floor\n                          </div>\n                        }\n                        placement=\"bottom-start\"\n                        style={{ backgroundColor: \"white\" }}\n                      >\n                        <InfoOutlinedIcon className={`${styles.iconbtn} `} />\n                      </LightTooltip>\n                      <CustomController\n                        name=\"shortened\"\n                        control={control}\n                        defaultValue={true}\n                        render={({ field: { onChange, value } }) => (\n                          <Toggle\n                            name=\"shortened\"\n                            value={value}\n                            styles={{\n                              transform: \"scale(0.75)\",\n                            }}\n                            onChange={(value) => {\n                              onChange(value);\n                            }}\n                          />\n                        )}\n                      />\n                    </label>\n                    {console.log(watch(\"floorsPerBlock\"))}\n                    <div className=\"col-10 mb-3\">\n                      <CustomTable\n                        otherBlocksList={watch(\"floorsPerBlock\")}\n                        tabelHeader={\"Block\"}\n                        tabelHeader2={\"Block Name\"}\n                        tabelHeader3={\n                          watch(\"shortened\")\n                            ? \"Shortened block name\"\n                            : \"Number of Floors\"\n                        }\n                        setduplicate={(data)=> setduplicate(data)}\n                        handleFloorCount={handleFloorCount}\n                        watch={watch}\n                        tabelHeader4={\n                          watch(\"shortened\") ? \"Number of Floors\" : null\n                        }\n                        errors={errors}\n                        register={register}\n                      />\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <label className={`me-2 ${styles.propertyLabel} pb-1`}>\n                      {watch(\"isBlocks\") == false\n                        ? \"Enter the number of floors\"\n                        : \"Enter the number of floors per block\"}\n                    </label>\n                    <LightTooltip\n                      title={\n                        <div className=\"p-1\">\n                          Total number of floors is inclusive of ground floor\n                        </div>\n                      }\n                      placement=\"bottom-start\"\n                      style={{ backgroundColor: \"white\" }}\n                    >\n                      <InfoOutlinedIcon className={`${styles.iconbtn} `} />\n                    </LightTooltip>\n                    <div className=\"col-4 \">\n                      <BlockTable\n                        addEmptyItem={() => addEmptyItem()}\n                        register={register}\n                        deleteItem={deleteItem}\n                        otherBlocksList={watch(\"floorsPerBlock\")}\n                        tabelHeader={\"Block\"}\n                        tabelHeader2={\"Number of Floors\"}\n                        errors={errors}\n                        handleFloorCount={handleFloorCount}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div className={`${styles.basicTitle} pt-3`}>\n                <div className=\"col-6\">\n                  <div className={`${styles.tabwrap}`}>\n                    {watch(\"structureType\") == \"FLATWISE\" ? (\n                      <label className={styles.propertyLabel}>\n                        Enter the number of flats per floor\n                      </label>\n                    ) : (\n                      <label className={styles.propertyLabel}>\n                        Enter the number of rooms per floor\n                      </label>\n                    )}\n\n                    <UnitNamingTab\n                      blockSequenceStart={blockSequenceStart}\n                      blockSequenceEnd={blockSequenceEnd}\n                      handleTabChange={handleTabChange}\n                      setActiveTab={(title) => {\n                        console.log(\"iiiii\", title);\n                        setActiveTab(title);\n                        setFloorTableChange((prevValue) => !prevValue);\n                      }}\n                      isRoomPackage\n                      activeTab={activeTab}\n                      tabs={blockTabs}\n                    />\n                    {console.log(blockTabs)}\n                    {console.log(activeTab)}\n                    {console.log(watch(\"flatsPerFloor\"))}\n                  </div>\n                </div>\n                <div className=\"col-4\">\n                  <div className={` ${styles.table}`}>\n                    <FloorTable\n                      register={register}\n                      otherFloorsList={!duplicate ? watch(\"flatsPerFloor\") :[]}\n                      otherFloor={blockLevelFloors}\n                      watch={watch}\n                      activeTab={activeTab}\n                      errors={errors}\n                      tabelHeader={\"Floor\"}\n                      tabelHeader3={\"Comments\"}\n                      tabelHeader2={\n                        watch(\"structureType\") == \"FLATWISE\"\n                          ? \"Number of Flats\"\n                          : \"Number of Rooms\"\n                      }\n                    />\n                    {console.log(blockLevelFloors)}{\" \"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <hr />\n      <div className={`d-flex justify-content-end ${styles.btn} py-2`}>\n        <div className={styles.btnWidth}>\n          <NormalButton\n            className={\"draftBtn\"}\n            label={\"Save as Draft\"}\n            id={\"draftBtn\"}\n            disabled={isBlockChanged}\n            onClick={handleSaveDraft}\n          />\n        </div>\n        <div className={styles.btnWidth}>\n          <NormalButton\n            className={\"submitBtn\"}\n            label={\"Save & Proceed\"}\n            disabled={isBlockChanged}\n            id=\"submitBtn\"\n            // onClick={handleNextTab}\n            onClick={(e) => {\n              setValue(\"isDraft\", false);\n              let result = handleSubmit(onsubmit)(e);\n              // if (result) setOpenModal(true);\n            }}\n          />\n        </div>\n      </div>\n      <StructureModal\n        visible={openModal}\n        handleLeftBtn={() => {\n          setOpenModal(false);\n          localStorage.setItem(\"isUnitNameAutoFill\", false);\n          handleNextTab();\n        }}\n        handleRightBtnClick={() => {\n          setOpenModal(false);\n          localStorage.setItem(\"isUnitNameAutoFill\", true);\n          handleNextTab();\n        }}\n        handleClose={() => setOpenModal(false)}\n        handleCloseBtn={true}\n        leftSideBtn={\"No, I’ll do it manually\"}\n        rightSideBtn={\"Yes\"}\n        modalLabel={`Do you want to generate flat numbers automatically?`}\n        modalDesc={\n          \"If you have already defined the flat name, you can proceed to enter the names manually.\"\n        }\n      />\n      <StructureModal\n        visible={openDeleteModal}\n        handleClose={() => setOpenDeleteModal(false)}\n        handleLeftBtn={() => handleApplyStructure(true)}\n        handleRightBtnClick={() => setOpenDeleteModal(false)}\n        leftSideBtn={\"Yes\"}\n        rightSideBtn={\"No\"}\n        modalLabel={`Are you sure you want to reset the Property Structure?`}\n        modalDesc={\"This will erase all filled data.\"}\n      />\n    </div>\n  );\n};\n\nexport default memo(InventorySetUp);\n","import React from \"react\";\n\nconst RadioButton = ({\n  label,\n  value,\n  checkedValue,\n  className,\n  onRadioChange,\n}) => {\n  const handleRadioChange = () => {\n    onRadioChange(value);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <input\n        type=\"radio\"\n        value={value}\n        checked={value === checkedValue}\n        onChange={handleRadioChange}\n        style={{\n          width: \"20px\",\n          height: \"20px\",\n          accentColor: \"#522987\",\n          cursor: \"pointer\",\n        }}\n      />\n      <label className={`m-0 px-3 fs-14 ${className}`}> {label}</label>\n    </div>\n  );\n};\n\nexport default RadioButton;\n","import React, { useEffect } from \"react\";\n// styles\nimport \"./style.scss\";\n\nconst UnitNamingTab = ({\n  activeTab,\n  setActiveTab,\n  tabs,\n  blockSequenceStart,\n  blockSequenceEnd,\n  setActiveTabName = () => { },\n  activeTabName = \"\",\n  isRoomPackage = false,\n}) => {\n\n  // console.log(\"blockSequenceStart:\", blockSequenceStart);\n  // console.log(\"blockSequenceEnd:\", blockSequenceEnd);\n  // console.log(\"tabs:\", tabs);\n  // console.log(\"Props received in UnitNamingTab:\", props);\n  // const generateTabs = () => {\n  //   const tabs = [];\n  //   // Check if blockSequenceStart and blockSequenceEnd are defined and have valid formats\n  //   if (blockSequenceStart && blockSequenceStart.match(/^A\\d+$/) && blockSequenceEnd && blockSequenceEnd.match(/^A\\d+$/)) {\n  //     const start = parseInt(blockSequenceStart.slice(1), 10);\n  //     const end = parseInt(blockSequenceEnd.slice(1), 10);\n\n  //     if (!isNaN(start) && !isNaN(end)) {\n  //       for (let i = start; i <= end; i++) {\n  //         tabs.push({\n  //           title: `A${i}`,\n  //           index: i - start,\n  //         });\n  //       }\n  //     }\n  //   }\n\n  //   return tabs;\n  // };\n\n  // const tabs = generateTabs();\n\n  const handleTab = (tab) => {\n    setActiveTab(tab);\n  };\n\n\n  // const handleTab = (tab, name) => {\n  //   setActiveTab(tab);\n  //   if (name) {\n  //     setActiveTabName(name);\n  //     localStorage.setItem(\"activeTab\", tab);\n  //     localStorage.setItem(\"activeTabName\", name);\n  //   } else {\n  //     localStorage.setItem(\"activeTab\", tab);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   if (activeTabName) {\n  //     handleTab(activeTab, activeTabName);\n  //   } else {\n  //     handleTab(activeTab);\n  //   }\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, []);\n\n\n  useEffect(() => {\n    handleTab(0); // Select the first tab when component mounts\n  }, []);\n\n\n\n  console.log(\"tabs\", tabs)\n  return (\n    <div className=\"unitNaming\">\n      <div className={isRoomPackage ? \"unit_room_package_tab\" : \"unit_tab_design\"}>\n        {/* {tabs.length > 0 &&\n        tabs.map((tab, i) => (\n          <div\n            key={tab.index}\n            className={\n              activeTab === i\n                ? \"tab_design_active\"\n                : \"tab_design_inActive\"\n            }\n            onClick={() => {\n              handleTab(i, tab.title);\n            }}\n          >\n            {tab.title}\n          </div>\n        ))} */}\n        {tabs && tabs?.map((tab, i) => (\n          <div\n            key={tab.index}\n            className={activeTab === tab.title ? \"unit_tab_design_active\" : \"unit_tab_design_inActive\"}\n            onClick={() => {\n              handleTab(tab.title);\n            }}\n          >\n            {tab.title}\n          </div>\n        ))}\n\n\n\n\n      </div>\n    </div>\n  );\n};\n\nexport default UnitNamingTab;\n","import Styles from \"./Toggle.module.scss\"\nimport React from \"react\";\nconst Toggle = ({ value, onChange, register, styles = {} }) => {\n    return (\n        <div\n            className={`${Styles.Switch} ${value ? Styles.active : \"\"}`}\n            onClick={() => onChange(!value)}\n            style={styles}\n            {...register}\n        >\n            <div\n                className={`${Styles.Thumb} ${value ? Styles.active : \"\"}`}\n            ></div>\n        </div>\n    );\n}\n\nexport default Toggle;","import moment from \"moment\";\n\nconst PASSWORD_REGEX =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?& ]{8,}$/s;\n\nconst Name_Regex = /^[a-zA-Z ]+$/;\n\nconst pinCodeRegex = /^\\d{6}$/;\n\nexport const spaceValidation = (value) =>\n  value ? value.toString().trim() !== \"\" : true;\n\nexport const validatePIN = (pin) => pinCodeRegex.test(pin);\n\nexport const nameValidation = (value) =>\n  value ? Name_Regex.test(value) : true;\n\nexport const passwordValidation = (value) =>\n  value && PASSWORD_REGEX.test(value);\n\nexport const ignoreNegativeValue = (value) => value && value > 0;\n\nexport const onlyNumbers = (value) => (value ? /^[0-9]+$/.test(value) : true);\n\nexport const numberLetterValidation = (value) =>\n  value ? /^[0-9a-zA-Z]+$/.test(value) : true;\n\nexport const maxLengthValidation = (len) => (value) =>\n  value ? String(value)?.length <= len : true;\n\nexport const minLengthValidation = (len) => (value) =>\n  value ? String(value)?.length >= len : true;\n\nexport const experienceValidate = (\n  data,\n  experienceYear,\n  setError,\n  errorName,\n  errorType,\n  shouldFocus\n) => {\n  if (data?.length > 0) {\n    let momentDates = data\n      ?.map((x) => x && moment(x?.passingYear))\n      .filter(Boolean);\n    const minDate = moment.min(momentDates);\n    const diffYear = moment().get(\"year\") - moment(minDate).get(\"year\");\n\n    if (+experienceYear && diffYear < +experienceYear) {\n      if (setError && errorName && errorType) {\n        setError(errorName, { type: errorType, shouldFocus });\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nexport const numberInput = (event) => {\n  // Check if the pressed key is the up arrow (38) or down arrow (40)\n  if (event.which === 107 || event.which === 187 || event.which === 38 || event.which === 40 || event.which === 45 || event.which === 69 || event.which === 189 || event.which === 173 || event.which === 110 || event.which === 109 || event.which === 190 || event.which === 46) {\n    event.preventDefault();\n  }\n};\n\nexport const numberInputMax = (event) => {\n  if (event.which === 107 || event.which === 187 || event.which === 38 || event.which === 40 || event.which === 45 || event.which === 69 || event.which === 189 || event.which === 173 || event.which === 110 || event.which === 109 || event.which === 190 || event.which === 46) {\n    event.preventDefault();\n  }\n  // if (event.which === 69 || event.which == 189 || event.which === 38 || event.which === 40 ) {\n  //   event.preventDefault();\n  // }\n  // Check if the pressed key is the up arrow (38) or down arrow (40)\n  const currentValue = event.target.value;\n  if (currentValue.length >= 3) {\n    const newValue = currentValue.slice(0, 2);\n    event.target.value = newValue;\n  }\n};\n\n// export const numberInput = event => {\n//     if (\n//         (event?.keyCode === 8) ||\n//         (event?.keyCode >= 48 && event?.keyCode <= 57) ||\n//         (event?.keyCode >= 37 && event?.keyCode <= 49)\n//     ) {\n//         return true;\n//     } else {\n//         event.preventDefault();\n//     }\n// }\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"CustomTable_table__Jeu4Z\",\"text\":\"CustomTable_text__C77oo\",\"tableContainer\":\"CustomTable_tableContainer__wqvfi\",\"error\":\"CustomTable_error__9Ztb6\",\"container\":\"CustomTable_container__SYcpy\",\"dropdownArrow\":\"CustomTable_dropdownArrow__zR9E4\",\"dropdownTable\":\"CustomTable_dropdownTable__Yg8K+\",\"color\":\"CustomTable_color__-WLSB\",\"inputfield\":\"CustomTable_inputfield__avXlE\",\"inputBorder\":\"CustomTable_inputBorder__6bQHS\"};","// extracted by mini-css-extract-plugin\nexport default {\"ChargesForm\":\"styles_ChargesForm__djH2M\",\"basicForm1\":\"styles_basicForm1__hYWQ0\",\"basicForm\":\"styles_basicForm__c1qgu\",\"rightBorder\":\"styles_rightBorder__60Ezf\",\"error\":\"styles_error__QCpsS\",\"comments\":\"styles_comments__8OvGS\",\"newChargeType\":\"styles_newChargeType__sMfst\",\"btn\":\"styles_btn__GFwzp\"};","// extracted by mini-css-extract-plugin\nexport default {\"ChargesForm\":\"styles_ChargesForm__RLSBf\",\"basicForm1\":\"styles_basicForm1__WqQ5R\",\"basicForm\":\"styles_basicForm__8w0z-\",\"rightBorder\":\"styles_rightBorder__JAOeW\",\"rightBottomRadius\":\"styles_rightBottomRadius__4enAZ\",\"leftBottomRadius\":\"styles_leftBottomRadius__CHbSf\",\"odd\":\"styles_odd__ap00J\",\"even\":\"styles_even__yVbNk\",\"error\":\"styles_error__uRqhZ\",\"comments\":\"styles_comments__MBJoG\",\"newChargeType\":\"styles_newChargeType__hNqoG\",\"btn\":\"styles_btn__4eijF\",\"test\":\"styles_test__ncr0G\"};","// extracted by mini-css-extract-plugin\nexport default {\"basicInfo\":\"InventorySetUp_basicInfo__jguy-\",\"contentPart\":\"InventorySetUp_contentPart__+NxIa\",\"btn\":\"InventorySetUp_btn__Q44z-\",\"rowWidth1\":\"InventorySetUp_rowWidth1__0XIAF\",\"AddressWidth\":\"InventorySetUp_AddressWidth__b7PQJ\",\"btnWidth\":\"InventorySetUp_btnWidth__BLC-i\",\"propertyLabel\":\"InventorySetUp_propertyLabel__1hzxT\",\"basicForm\":\"InventorySetUp_basicForm__vVoZ1\",\"basicForm2\":\"InventorySetUp_basicForm2__dl3yn\",\"iconbtn\":\"InventorySetUp_iconbtn__Pd18K\",\"circleAdd\":\"InventorySetUp_circleAdd__GSoI9\",\"table\":\"InventorySetUp_table__lzHtT\"};","// extracted by mini-css-extract-plugin\nexport default {\"Switch\":\"Toggle_Switch__rFDje\",\"Thumb\":\"Toggle_Thumb__Txx0M\",\"active\":\"Toggle_active__xGvf0\"};"],"names":["_ref","initialData","tabelHeader","tabelHeader2","tabelHeader3","tabelHeader4","errors","register","setduplicate","_ref$otherBlocksList","otherBlocksList","_ref$handleFloorCount","handleFloorCount","watch","onToggleBulkUpload","handleUserInput","index","event","Type","newValue","target","value","_toConsumableArray","name","console","log","_jsx","_Fragment","children","className","styles","tableContainer","_jsxs","table","propertyName","columnContainer","map","row","_errors$floorsPerBloc","_errors$floorsPerBloc2","_errors$floorsPerBloc3","_errors$floorsPerBloc4","_errors$floorsPerBloc5","_errors$floorsPerBloc6","React","block","InputBox","type","ratefiled","readOnly","concat","styleInputBox","placeholder","required","onChange","blockName","validate","isduplicate","field","floorsPerBlock","isDuplicate","some","floor","i","error","FormErrorMessage","messages","shortenedName","onKeyDown","numberInputMax","numberOfFloors","_ref$register","_useState","useDispatch","useState","_useState2","_slicedToArray","setUserInput","ChargesForm","length","basicForm","basicForm1","earlyCheckInChargesBody","otherChargesheading","rightBorder","tableHeading","item","array","pattern","max100","parseInt","_ref$otherFloorsList","otherFloorsList","activeTab","otherFloor","flatsPerFloor","showFloorComments","useMemo","String","flats","_errors$flatsPerFloor","_errors$flatsPerFloor2","Shortened","blockNameFormat","isDisplay","show","odd","even","lastIndex","leftBottomRadius","rightBottomRadius","comments","visible","modalLabel","handleLeftBtn","handleRightBtnClick","modalDesc","_ref$rightSideBtn","rightSideBtn","_ref$leftSideBtn","leftSideBtn","_ref$handleClose","handleClose","_ref$handleCloseBtn","handleCloseBtn","Modal","open","onClose","Box","sx","position","top","left","transform","width","borderRadius","bgcolor","boxShadow","p","onClick","src","close","style","right","id","InfoIcon","marginTop","NormalButton","label","InventorySetUp","handleNextTab","inventorySetUp","useSelector","state","unitForm","_useForm","useForm","mode","defaultValues","handleSubmit","getValues","setValue","reset","control","clearErrors","_useForm$formState","formState","dirtyFields","isDirty","dispatch","blockSequenceStart","blockSequence","blockSequenceEnd","otherBlocks","Array","from","_","setSaveDraft","_useState3","_useState4","showError","setShowError","_useState5","_useState6","setActiveTab","_useState7","_useState8","openModal","setOpenModal","_useState9","_useState10","openDeleteModal","setOpenDeleteModal","_useState11","_useState12","blockFloorValues","setBlockFloorValues","_useState13","_useState14","structureType","setStructureType","_useState15","_useState16","duplicate","_useState17","_useState18","setFloorTableChange","_useState19","_useState20","rooms","setRooms","_useState21","_useState22","beds","setBeds","_useState23","_useState24","setshowFloorComments","_useState25","_useState26","tableData","_useState27","_useState28","isBlockChanged","setIsBlockChanged","_useState29","_useState30","blockTabs","setBlockTabs","LightTooltip","styled","_ref2","props","_objectWithoutProperties","_excluded","Tooltip","_objectSpread","classes","popper","_ref3","_ref4","theme","_defineProperty","tooltipClasses","tooltip","backgroundColor","palette","common","white","color","shadows","fontSize","margin","arrow","generateFloorValues","flatMap","floorDetails","isNaN","_floorsPerBlock$","_floorsPerBlock$2","_floorsPerBlock$3","_floorsPerBlock$4","title","_floorsPerBlock$5","_floorsPerBlock$6","_floorsPerBlock$7","_floorsPerBlock$8","useEffect","startValue","_generateSequence","generateSequence","endValue","_generateSequence$inB","inBetweenSequence","floorsData","a","count","_floorsPerBlock$9","_floorsPerBlock$10","_floorsPerBlock$12","toUpperCase","_floorsPerBlock$11","_floorsPerBlock$13","checkIsStructure","data","formstructureType","formrooms","formBeds","handleRadioChange","setTimeout","handleInputValueChange","setBlockSequenceStart","setBlockSequenceEnd","handleApplyStructure","isReset","blockLevelFloors","result","filter","getBlockFloors","_blockLevelFloors$","_blockLevelFloors$2","onsubmit","basicInfo","contentPart","basicTitle","propertyLabel","RadioButton","checkedValue","onRadioChange","CheckBox","isChecked","btn","disabled","rowWidth1","min","_ref5","_ref5$target","shouldValidate","numberOfBlocks","basicForm2","gap","val","placement","InfoOutlinedIcon","iconbtn","includes","rowWidth","registerBlock","test","_ref6","_ref6$target","onlyLetters","replace","_value$toUpperCase","call","numberInput","isDraft","_ref7","_ref7$target","buildingName","horizontalLine","_ref8","_ref8$target","sequenceTo","alphabetic","CustomController","defaultValue","render","_ref9","_ref9$field","Toggle","CustomTable","BlockTable","addEmptyItem","updatedBlocksList","numFloors","updateOtherBlocksList","deleteItem","updatedList","tabwrap","UnitNamingTab","handleTabChange","prevValue","isRoomPackage","tabs","FloorTable","btnWidth","e","StructureModal","localStorage","setItem","memo","checked","height","accentColor","cursor","_ref$isRoomPackage","setActiveTabName","activeTabName","handleTab","tab","_ref$styles","Styles","Switch","active","Thumb","PASSWORD_REGEX","Name_Regex","pinCodeRegex","spaceValidation","toString","trim","validatePIN","pin","nameValidation","passwordValidation","ignoreNegativeValue","onlyNumbers","numberLetterValidation","maxLengthValidation","len","_String","minLengthValidation","_String2","experienceValidate","experienceYear","setError","errorName","errorType","shouldFocus","momentDates","x","moment","passingYear","Boolean","minDate","diffYear","get","which","preventDefault","currentValue","slice"],"sourceRoot":""}