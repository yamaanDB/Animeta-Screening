{"version":3,"file":"static/js/5735.37b8807a.chunk.js","mappings":"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","sources":["assets/icons/dropdownArrow.svg","assets/icons/upArrow.svg","components/AddUnits/UnitNaming/UnitNamingTable/Table/index.jsx","webpack://Boston-Living/./src/components/AddUnits/UnitNaming/UnitNamingTable/Table/index.module.scss?a418"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDropdownArrow(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 6,\n    viewBox: \"0 0 10 6\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 1L5 5L1 1\",\n    stroke: \"#1E2528\",\n    strokeWidth: 1.2,\n    strokeMiterlimit: 10,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDropdownArrow);\nexport default __webpack_public_path__ + \"static/media/dropdownArrow.1110f3c54e41b6820f381d3b1ac4477a.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgUpArrow(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    height: \"800px\",\n    width: \"800px\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 330 330\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"XMLID_224_\",\n    d: \"M325.606,229.393l-150.004-150C172.79,76.58,168.974,75,164.996,75c-3.979,0-7.794,1.581-10.607,4.394 l-149.996,150c-5.858,5.858-5.858,15.355,0,21.213c5.857,5.857,15.355,5.858,21.213,0l139.39-139.393l139.397,139.393 C307.322,253.536,311.161,255,315,255c3.839,0,7.678-1.464,10.607-4.394C331.464,244.748,331.464,235.251,325.606,229.393z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgUpArrow);\nexport default __webpack_public_path__ + \"static/media/upArrow.4c6abf93e5f81056680a18aefc73d87e.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from \"react\";\nimport styles from \"./index.module.scss\";\nimport dropdownArrow from \"../../../../../assets/icons/dropdownArrow.svg\";\nimport upArrow from \"../../../../../assets/icons/upArrow.svg\";\n\nconst Table = ({ initialData, tabelHeader, tabelHeader2, tabelHeader3, errors, register, onToggleBulkUpload, }) => {\n  const [tableData, setTableData] = useState(initialData);\n\n  // array to keep track of which dropdowns are open\n  const [openDropdowns, setOpenDropdowns] = useState(\n    Array(initialData.length).fill(false)\n  );\n\n  const toggleDropdown = (index) => {\n    const updatedDropdowns = [...openDropdowns];\n    updatedDropdowns[index] = !updatedDropdowns[index];\n    setOpenDropdowns(updatedDropdowns);\n    onToggleBulkUpload();\n  };\n\n  // handleInputChange function to update the input values\n  const handleInputChange = (e, rowIndex, columnName) => {\n    const updatedData = [...tableData];\n    updatedData[rowIndex][columnName] = e.target.value;\n    setTableData(updatedData);\n  };\n\n  const inputValues = [\n    { floor: \"1\", number: \"A\", sequence: \"A10A\" },\n    { floor: \"2\", number: \"B\", sequence: \"A10B\" },\n    { floor: \"3\", number: \"C\", sequence: \"A10C\" },\n  ];\n\n  return (\n    <>\n      <div className={styles.tableContainer}>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>{tabelHeader}</th>\n              <th className={styles.propertyName}>\n                <div className={styles.columnContainer}>{tabelHeader2}</div>\n              </th>\n              <th>{tabelHeader3}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((row, index) => (\n              <React.Fragment key={index}>\n                <tr>\n                  <td >\n                    <span\n                      className={styles.dropdownArrow}\n                      onClick={() => toggleDropdown(index)}\n                    >\n                      {openDropdowns[index] ? (\n                        <img\n                          src={upArrow}\n                          alt=\"Dropdown Arrow\"\n                          style={{ width: \"10px\", height: \"10px\" }}\n                        />\n                      ) : (\n                        <img\n                          src={dropdownArrow}\n                          alt=\"Dropdown Arrow\"\n                        /> /* Unicode for drop-down arrow */\n                      )}\n                    </span>\n                    {openDropdowns[index] ? (\n                      <input\n                        type=\"text\"\n                        value={row.floor}\n                        onChange={(e) =>\n                          handleInputChange(e, index, \"floor\")\n                        }\n                        style={{ border: \"none\", outline: \"none\" }}\n                        placeholder=\"Eg. 1\"\n                      />\n                    ) : (\n                      <span>\n                        <input\n                          onChange={(e) =>\n                            handleInputChange(e, index, \"floor\")\n                          }\n                          type=\"text\"\n                          value={row.floor}\n                          style={{ border: \"none\", outline: \"none\", }}\n                        />\n                      </span>\n                    )}\n                  </td>\n                  <td>\n                    {openDropdowns[index] ? (\n                      <input\n                        type=\"text\"\n                        value={row.numberOfFlats}\n                        onChange={(e) => handleInputChange(e, index, \"numberOfFlats\")}\n                        style={{ border: \"none\", outline: \"none\", }}\n                        placeholder=\"Eg. 8\"\n                      />\n                    ) : (\n                      <span>\n                        <input\n                          onChange={(e) => handleInputChange(e, index, \"numberOfFlats\")}\n                          type=\"text\"\n                          value={row.numberOfFlats}\n                          style={{ border: \"none\", outline: \"none\", }}\n                        />\n                      </span>\n                    )}\n                  </td>\n                  <td className={styles.color}>\n                    {openDropdowns[index] ? (\n                      <input\n                        type=\"text\"\n                        value={row.flatSequence}\n                        onChange={(e) => handleInputChange(e, index, \"flatSequence\")}\n                        style={{ border: \"none\", outline: \"none\",  background: \"#F3F5E7\" }}\n                        placeholder=\"Eg. A10A- A10H\"\n                        \n                        \n                      />\n                    ) : (\n                      <span  >\n                        <input\n                          onChange={(e) => handleInputChange(e, index, \"flatSequence\")}\n                          type=\"text\"\n                          value={row.flatSequence}\n                          style={{ border: \"none\", outline: \"none\",  background: \"#F3F5E7\" }}\n                          \n                        />\n                      </span>\n                    )}\n                  </td>\n                </tr>\n                {openDropdowns[index] && (\n                  <>\n                    <tr className={styles.dropdownTable}>\n                      <td className=\"px-4\">Flat Count</td>\n                      <td>Flat Number</td>\n                      <td>Flat Sequence</td>\n                    </tr>\n\n                    {inputValues.map((input, i) => (\n                      <tr key={i} className={styles.dropdownTable}>\n                        <td className=\"px-4\">\n                          <input\n                            type=\"text\"\n                            value={input.floor}\n                            className={styles.inputBorder}\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"text\"\n                            value={input.number}\n                            disabled={!openDropdowns[index]}\n                            className={styles.inputBorder}\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"text\"\n                            value={input.sequence}\n                            disabled={!openDropdowns[index]}\n                            className={styles.inputBorder}\n                          />\n                        </td>\n                      </tr>\n                    ))}\n                  </>\n                )}\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\nexport default Table;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"Table_table__LpqDV\",\"tableContainer\":\"Table_tableContainer__TB-BD\",\"container\":\"Table_container__xQK4m\",\"dropdownArrow\":\"Table_dropdownArrow__NHFRk\",\"dropdownTable\":\"Table_dropdownTable__iHFNY\",\"color\":\"Table_color__r20xs\",\"inputfield\":\"Table_inputfield__YJitw\",\"inputBorder\":\"Table_inputBorder__aSOAo\"};"],"names":["_ref","initialData","tabelHeader","tabelHeader2","tabelHeader3","onToggleBulkUpload","errors","register","_useState","useState","_useState2","_slicedToArray","tableData","setTableData","_useState3","Array","length","fill","_useState4","openDropdowns","setOpenDropdowns","handleInputChange","e","rowIndex","columnName","updatedData","_toConsumableArray","target","value","inputValues","floor","number","sequence","_jsx","_Fragment","children","className","styles","tableContainer","_jsxs","table","propertyName","columnContainer","map","row","index","React","dropdownArrow","onClick","updatedDropdowns","toggleDropdown","src","upArrow","alt","style","width","height","type","onChange","border","outline","placeholder","numberOfFlats","color","flatSequence","background","dropdownTable","input","i","inputBorder","disabled"],"sourceRoot":""}